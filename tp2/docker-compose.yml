version: '2.4'
services:
  rabbitmq:
    image: rabbitmq:3.7.14-management
    ports:
      - '15672:15672'
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "check_port_connectivity"]
      interval: 5s
      timeout: 15s
      retries: 10

  surface_dispatcher:
    build: surface_dispatcher
    command: python3 -u ./surface_dispatcher.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  surface_dispatcher_terminator:
    build: terminator
    environment:
      PROCESSES_NUMBER: ${SURFACE_DISPATCHERS_NUMBER}
      IN_QUEUE: dispatcher_terminator
      GROUP_QUEUE: matches_surface
      NEXT_EXCHANGE: surfaces
      NEXT_EXCHANGE_TYPE: direct
      NEXT_ROUTING_KEYS: Hard-Clay-Carpet-Grass
    command: python3 -u ./terminator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  hard_accumulator:
    build: accumulator
    environment:
      ROUTING_KEY: Hard
      EXCHANGE: surfaces
      OUTPUT_QUEUE: surface_values
    command: python3 -u ./accumulator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  clay_accumulator:
    build: accumulator
    environment:
      ROUTING_KEY: Clay
      EXCHANGE: surfaces
      OUTPUT_QUEUE: surface_values
    command: python3 -u ./accumulator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  grass_carpet_accumulator:
    build: accumulator
    environment:
      ROUTING_KEY: Grass-Carpet
      EXCHANGE: surfaces
      OUTPUT_QUEUE: surface_values
    command: python3 -u ./accumulator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  average_calculator:
    build: average_calculator
    command: python3 -u ./average_calculator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  joiner:
    build: joiner
    command: python3 -u ./joiner.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  joiner_terminator:
    build: terminator
    environment:
      PROCESSES_NUMBER: ${JOINERS_NUMBER}
      IN_QUEUE: joiner_terminator
      GROUP_QUEUE: matches_join
      NEXT_EXCHANGE: joined
      NEXT_EXCHANGE_TYPE: fanout
      NEXT_ROUTING_KEYS: ''
    command: python3 -u ./terminator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  age_calculator:
    build: age_calculator
    command: python3 -u ./age_calculator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  age_calculator_terminator:
    build: terminator
    environment:
      PROCESSES_NUMBER: ${AGE_CALCULATORS_NUMBER}
      IN_QUEUE: calculator_terminator
      GROUP_QUEUE: joined_age
      NEXT_EXCHANGE: player_age
      NEXT_EXCHANGE_TYPE: fanout
      NEXT_ROUTING_KEYS: ''
    command: python3 -u ./terminator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  age_difference_filter:
    build: age_difference_filter
    command: python3 -u ./age_difference_filter.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  age_difference_filter_terminator:
    build: terminator
    environment:
      PROCESSES_NUMBER: ${AGE_DIFFERENCE_FILTERS_NUMBER}
      IN_QUEUE: age_filter_terminator
      GROUP_QUEUE: age
      NEXT_EXCHANGE: database
      NEXT_EXCHANGE_TYPE: direct
      NEXT_ROUTING_KEYS: age
    command: python3 -u ./terminator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  different_hands_filter:
    build: different_hands_filter
    command: python3 -u ./different_hands_filter.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  different_hands_filter_terminator:
    build: terminator
    environment:
      PROCESSES_NUMBER: ${DIFFERENT_HANDS_FILTERS_NUMBER}
      IN_QUEUE: hands_filter_terminator
      GROUP_QUEUE: joined_hands
      NEXT_EXCHANGE: hands
      NEXT_EXCHANGE_TYPE: direct
      NEXT_ROUTING_KEYS: R-L-U
    command: python3 -u ./terminator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  right_accumulator:
    build: accumulator
    environment:
      ROUTING_KEY: R
      EXCHANGE: hands
      OUTPUT_QUEUE: hands_values
    command: python3 -u ./accumulator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  left_accumulator:
    build: accumulator
    environment:
      ROUTING_KEY: L-U
      EXCHANGE: hands
      OUTPUT_QUEUE: hands_values
    command: python3 -u ./accumulator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  percentage_calculator:
    build: percentage_calculator
    command: python3 -u ./percentage_calculator.py
    depends_on:
      rabbitmq:
        condition: service_healthy

  client:
    build: client
    command: python3 -u ./client.py
    depends_on:
      rabbitmq:
        condition: service_healthy
    depends_on:
      - joiner

  database:
    build: database
    command: python3 -u ./database.py
    depends_on:
      rabbitmq:
        condition: service_healthy
